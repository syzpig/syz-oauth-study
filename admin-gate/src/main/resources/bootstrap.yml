#配置配置中心
spring:
  cloud:
    config:
      discovery:
        service-id: admin-config  #指定配置中心的service-id，便于扩展为高可用配置集群。
        enabled: true
      label: master  #{label}对应git上不同的分支，默认为master。  对应git的分支。如果配置中心使用的是本地存储，则该参数无用
      name: gate    #对应{application}部分
      profile: dev   #对应{profile}部分

#配置解释：
#配置中心的{application}-{profile}.properties配置文件，{label}对应git上不同的分支，默认为master。

#spring.application.name：对应{application}部分

#spring.cloud.config.profile：对应{profile}部分

#spring.cloud.config.label：对应git的分支。如果配置中心使用的是本地存储，则该参数无用

#spring.cloud.config.uri：配置中心的具体地址（不建议使用，因为不利于负载均衡）

#spring.cloud.config.discovery.service-id：指定配置中心的service-id，便于扩展为高可用配置集群。

#特别注意：上面这些与spring-cloud相关的属性必须配置在bootstrap.properties中，config部分内容才能被正确加载。因为config的相关配置会先于application.properties，而bootstrap.properties的加载也是先于application.properties。例如上面的defaultZone如果不配置，则找不到service-id，会导致启动失败。
#https://www.jianshu.com/p/757a46dc57e5

##配置实时刷新
##配置中心的数据修改后，客户端可实时获取更新内容，实现方式：

##1. config-client的pom.xml中新增spring-boot-starter-actuator监控模块，其中包含了/refresh刷新API。

##2. git中配置数据修改后，config-client中执行http://localhost:18443/refresh 即可实现client端配置数据更新


## 设置熔断超时时间
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 5000

#请求和响应GZIP压缩支持
feign:
  compression:
    request:
      enabled: true  #支持请求GZIP压缩
      mime-types: text/xml,application/xml,application/json
      min-request-size: 2048
    response:
      enabled: true  #支持响应GZIP压缩

